- name: "Set up local files"
  hosts: localhost
  tasks:
    - name: "Create largefiles link if needed"
      shell: |
        if [ ! -e largefiles ]
        then
          ln -s \
            /data/vision/torralba/small-projects/vision-cluster/largefiles
            largefiles && echo "Added largefiles link"
        fi
      register: largefiles_link
      changed_when: '"Added" in largefiles_link.stdout'

- name: "Basic ansible setup"
  hosts: gpu
  become: yes
  tasks:
    - name: "Remove obsolete kalakris cmake ppa"
      apt_repository:
        repo: "ppa:kalakris/cmake"
        state: absent

    - name: "Add aptitude needed by ansible"
      apt: name=aptitude

    - name: "Install https support for apt"
      apt: name=apt-transport-https

    - name: "Install python packaging and build-essential support"
      apt: name={{item}}
      with_items:
        - libssl-dev
        - build-essential
        - python-pip
        - python-dev
        - libffi-dev
        - python-cffi

    - name: "Update python ssl support"
      pip: name="urllib3 pyopenssl ndg-httpsclient pyasn1"

    - name: "Update ca-certificates for https support"
      apt: name=ca-certificates

- name: "Install ansible"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add ansible ppa"
      apt_repository:
        repo: "ppa:ansible/ansible"
        state: present
        update_cache: yes

    - name: "Install ansible itself"
      apt: name=ansible


- name: "Install useful packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install various monitoring tools"
      apt: name={{item}}
      with_items:
        - htop
        - iotop

    - name: "Install glances"
      pip:
        name:
          - "glances[gpu,web]"

    - name: "Update apt cache and do a full dist upgrade"
      apt: update_cache=yes upgrade=dist cache_valid_time=3600

- name: "Machine learning dependencies"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add fortran opencv, gflags, lmdb, hdf5 support, etc."
      apt: name={{item}}
      with_items:
        - gfortran
        - libatlas-base-dev
        - libleveldb-dev
        - libsnappy-dev
        - libopencv-dev
        - libhdf5-serial-dev
        - libgflags-dev
        - libgoogle-glog-dev
        - liblmdb-dev
    - name: "Add boost library."
      apt: name=libboost-all-dev install_recommends=no

# Different versions of google protobuf are not binary-compatible,
# and different deep learning tools have different needs: while caffe
# is ok with the old protobuf packaged with ubuntu, tensorflow and
# andaconda want a very current protobuf.  So we upgrade to a recent
# protobuf that is far ahead of ubuntu by building directly from
# the google sources.
- name: "Build google protobuf 3.2 from source"
  hosts: gpu
  become: yes
  tasks:
    - name: "Check if protobuf is present"
      command: dpkg-query -W libprotobuf12 libprotobuf-lite12 \
        libprotoc12 libprotobuf-dev libprotoc-dev protobuf-compiler \
      register: protobuf_check
      failed_when: protobuf_check.rc > 1
      changed_when: protobuf_check.rc == 1

    - name: "Create temp build directory"
      file: path=/tmp/ansible-proto-build state=directory
      when: protobuf_check.rc == 1

    - name: "Download protobuf 3.2 sources"
      unarchive:
        src: "https://github.com/google/protobuf/releases/download/v3.2.0/protobuf-cpp-3.2.0.tar.gz"
        dest: /tmp/ansible-proto-build
        remote_src: yes
      when: protobuf_check.rc == 1

    - name: "Build and install protobuf"
      shell: |
        ./configure && make -j8 && \
        cp -a src/.libs/lib*.a* src/.libs/lib*.so* \
            /usr/lib/x86_64-linux-gnu/ && \
        cp src/.libs/protoc /usr/bin/
      args:
        chdir: /tmp/ansible-proto-build/protobuf-3.2.0
      register: protobuf_build
      failed_when: protobuf_build.rc > 0
      when: protobuf_check.rc == 1

    - name: "Verify protoc installation"
      command: /usr/bin/protoc --version
      register: protoc_test
      failed_when: '"3.2.0" not in protoc_test.stdout'
      when: protobuf_check.rc == 1

    - name: "Copy protobuf dummy deb files"
      copy:
        dest: /tmp/ansible-proto-build/
        src: files/protobuf/
      when: protobuf_check.rc == 1

    - name: "Install protobuf dummy deb files"
      apt: deb={{item}}
      with_items:
        - "/tmp/ansible-proto-build/libprotobuf12_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotobuf-lite12_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotoc12_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotobuf-dev_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/libprotoc-dev_3.2.0-0~dummy_amd64.deb"
        - "/tmp/ansible-proto-build/protobuf-compiler_3.2.0-0~dummy_amd64.deb"
      when: protobuf_check.rc == 1

- name: "Intel MKL library"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add intel apt-key"
      apt_key:
        url: "https://apt.repos.intel.com/intel-gpg-keys/\
              GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB"

    - name: "Add intel mkl apt repository"
      apt_repository:
        repo: "deb https://apt.repos.intel.com/mkl all main"
        filename: "intel-mkl"
        update_cache: yes

    - name: "Install intel MKL libraries"
      apt: name="intel-mkl-64bit-2017.3-056"

    - name: "Add MKL library to ld.so.d path"
      copy:
        dest: /etc/ld.so.conf.d/mkl.conf
        src: files/mkl/mkl.conf
      notify:
        - run ldconfig

  handlers:
    - name: run ldconfig
      command: ldconfig


- name: "Nvidia CUDA library"
  hosts: gpu
  become: yes
  tasks:
    - name: "Check if CUDA is present"
      command: dpkg-query -W cuda
      register: cuda_check_deb
      failed_when: cuda_check_deb.rc > 1
      changed_when: cuda_check_deb.rc == 1

    - name: "Download CUDA repo deb"
      apt:
        deb: "https://developer.download.nvidia.com/compute/cuda/repos/\
              ubuntu1404/x86_64/cuda-repo-ubuntu1404_8.0.61-1_amd64.deb"
      when: cuda_check_deb.rc == 1

    - name: "Update apt-get cache"
      apt: update_cache=yes
      ignore_errors: yes
      when: cuda_check_deb.rc == 1

    - name: "Install CUDA drivers"
      apt: name=cuda
      when: cuda_check_deb.rc == 1

- name: "Nvidia CUDNN distribution"
  hosts: gpu
  become: yes
  tasks:
    - name: "Check if CUDNN is present"
      command: dpkg-query -W libcudnn5-dev libcudnn5 \
        libcudnn6-dev libcudnn6 libcudnn7-dev libcudnn7
      register: cudnn_check_deb
      failed_when: cudnn_check_deb.rc > 1
      changed_when: cudnn_check_deb.rc == 1

    - name: "Copy CUDNN deb files"
      copy:
        dest: /tmp/ansible-cudnn/
        src: largefiles/cudnn/trusty/
      when: cudnn_check_deb.rc == 1

    - name: "Install CUDNN runtime deb files"
      apt: deb={{item}}
      with_items:
        - "/tmp/ansible-cudnn/libcudnn5_5.1.10-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn5-dev_5.1.10-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn6_6.0.21-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn6-dev_6.0.21-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn7_7.0.1.13-1+cuda8.0_amd64.deb"
        - "/tmp/ansible-cudnn/libcudnn7-dev_7.0.1.13-1+cuda8.0_amd64.deb"
      when: cudnn_check_deb.rc == 1

- name: "python3 packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install pip3, python3-dev, and cffi"
      apt: name={{item}}
      with_items:
        - python3-pip
        - python3-dev
        - python3-cffi
    - name: "Install wheel"
      pip: executable=pip3 name=wheel
    - name: "Set up numpy for python3"
      pip: executable=pip3 name=numpy
    - name: "Set up scipy for python3"
      pip: executable=pip3 name=scipy

- name: "Shared Anaconda 3 distribution"
  hosts: gpu
  become: true
  vars:
    anaconda_version: 4.3.0
    anaconda_parent_dir: /opt/
    anaconda3_path: "/opt/Anaconda3-{{ anaconda_version }}-Linux-x86_64"
  pre_tasks:
    - name: Check if Anaconda 3 is already installed
      stat:
        path: "{{ anaconda3_path }}"
      register: anaconda3_installed
      tags:
        - anaconda-install
  roles:
    - role: andrewrothstein.anaconda
      anaconda_python_ver : '3'
      anaconda_ver: "{{ anaconda_version }}"
      when: not anaconda3_installed.stat.exists
      tags: anaconda-install
  tasks: 
    - name: "link anaconda..."
      become: yes
      become_user: root
      file:
        dest: /opt/anaconda
        src: "{{ anaconda3_path }}"
        state: link
      tags:
        - anaconda-install
    - name: "Set up python 3.6"
      become: yes
      shell: "/opt/anaconda/bin/conda install -y -q python=3.6.2"
      register: conda_env_update
      changed_when: '"COMPLETE" in conda_env_update.stdout'

- name: "Install tensorflow, pytorch, theano in shared anaconda"
  hosts: gpu
  become: true
  tasks:
    - name: "Install pytorch"
      conda:
        name: pytorch
        version: 0.2.0
        channels: soumith
        executable: /opt/anaconda/bin/conda

    - name: "Install torchvision"
      conda:
        name: torchvision
        version: 0.1.9
        channels: soumith
        executable: /opt/anaconda/bin/conda

    - name: "Install tensorflow"
      conda:
        name: tensorflow-gpu
        version: 1.2.1
        executable: /opt/anaconda/bin/conda

    - name: "Install theano"
      conda:
        name: theano
        version: 0.9.0
        executable: /opt/anaconda/bin/conda

    - name: "Install keras"
      conda:
        name: keras
        version: 2.0.5
        executable: /opt/anaconda/bin/conda

- name: "Build and install caffe-1.0 from source"
  hosts: gpu
  become: true
  tasks:
    - name: "Check if caffe is present"
      shell: |
        test -L /opt/caffe/bin/caffe && \
        test -f /opt/caffe/bin/caffe.bin
      register: caffe_check
      failed_when: caffe_check.rc > 1
      changed_when: caffe_check.rc == 1

    - name: "Create temp build directory"
      file: path=/tmp/ansible-caffe-build state=directory
      when: caffe_check.rc == 1

    - name: "Download caffe-1.0 sources"
      unarchive:
        src: "https://github.com/BVLC/caffe/archive/1.0.tar.gz"
        dest: /tmp/ansible-caffe-build
        remote_src: yes
      when: caffe_check.rc == 1

    - name: "Copy our caffe Makefile.config"
      copy:
        dest: /tmp/ansible-caffe-build/caffe-1.0/Makefile.config
        src: files/caffe/Makefile.config
      when: caffe_check.rc == 1

    - name: "Build and install caffe-1.0"
      shell: |
        make clean && \
        make all distribute -j12 && \
        ls distribute/bin | \
          sed -n 's/\.bin$//p' | \
          xargs -n1 -I{} ln -s {}.bin distribute/bin/{} && \
        mkdir -p /opt/caffe && \
        mv distribute/* /opt/caffe && \
        echo "caffe build complete"
      args:
        chdir: /tmp/ansible-caffe-build/caffe-1.0
      register: caffe_build
      failed_when: caffe_build.rc > 0
      changed_when: '"caffe build complete" in caffe_build.stdout'
      when: caffe_check.rc == 1

    - name: "Remove temp build directory"
      file: path=/tmp/ansible-caffe-build state=absent
      when: caffe_check.rc == 1

- name: "Set up common login environment variables"
  hosts: gpu
  become: true
  tasks:
    - name: "Copy profile.local"
      copy:
        dest: /etc/profile.local
        src: files/profile.local

